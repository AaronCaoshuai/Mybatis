<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--引入java中配置文件 也可以指定其内部的子属性
    mybatis加载属性的过程
    - 读取properties 元素体内定义的属性。
    - 读取properties 元素中resource或 url 加载的属性，它会覆盖已读取的同名属性-->
    <properties resource="db.properties"/>
    <!--设置,修改mybatis的一些运行轨迹-->
    <settings>
        <!--mybatis在控制台输出SQL日志-->
        <setting name="logImpl" value="STDOUT_LOGGING" />
        <!--MyBatis中的延迟加载，也称为懒加载，是指在进行关联查询时，按照设置延迟规则推迟对关联对象的select查询。延迟加载可以有效的减少数据库压力
            Mybatis的延迟加载，需要通过resultMap标签中的association和collection子标签才能演示成功。
            Mybatis的延迟加载，也被称为是嵌套查询，对应的还有嵌套结果的概念，可以参考一对多关联的案例。
            注意：MyBatis的延迟加载只是对关联对象的查询有延迟设置，对于主加载对象都是直接执行查询语句的。
        -->
        <!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。
        特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 默认为false -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--侵入式延迟加载开关:true 当开启时，任何方法的调用都会加载该对象的所有属性。
            否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)。
            深度延迟加载:false
            默认值false （在 3.4.1 及之前的版本默认值为 true）-->
        <setting name="aggressiveLazyLoading" value="true"/>
        <!--lazyLoadTriggerMethods：指定哪个对象的方法触发一次延迟加载。
        默认值：equals,clone,hashCode,toString-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
        <!--允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。
        尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）
        默认为false-->
        <setting name="useGeneratedKeys" value="true"/>
        <!--开启二级缓存,默认关闭
            1. 第一次调用mapper下的SQL去查询用户信息。查询到的信息会存到该mapper对应的二级缓存区域内。
            2. 第二次调用相同namespace下的mapper映射文件中相同的SQL去查询用户信息。会去对应的二级缓存内取结果。
            3. 如果调用相同namespace下的mapper映射文件中的增删改SQL，并执行了commit操作。此时会清空该namespace下的二级缓存。
            二级缓存缺点:控制力度不够细,多表联合查询会造成数据脏读问题,内置二级缓存是内存缓存,
            解决方案:可以使用mybatis接口可以自定义缓存,多表查询可以在mapper中使用<cache-ref> 不同mapper引用同一个namespace缓存
            不过，它会使缓存的使用效率变的很低！
            任意的更新操作都会将共用的Cache清空，会频繁地清空Cache，
            导致Cache实际的命中率和使用率就变得很低了，所以这种策略实际情况下是不可取的。
            对于某些表执行了更新(update、delete、insert)操作后，如何去清空跟这些表有关联的查询语句所造成的缓存；
            这样，就是以很细的粒度管理MyBatis内部的缓存，使得缓存的使用率和准确率都能大大地提升。
        -->
        <setting name="cacheEnabled" value="true"/>
    </settings>
    <!--Mybatis 默认支持java中的部分类型 以下是自定义别名-->
    <typeAliases>
        <!-- 单个别名定义 -->
        <!--<typeAlias alias="user" type="User"/>-->
        <!-- 批量别名定义，扫描整个包下的类，别名为类名（首字母大写或小写都可以） -->
        <package name="com.aaron.mybatisdemo.domain"/>
    </typeAliases>
    <!-- mybatis 环境配置 -->
    <environments default="dev">
        <environment id="dev">
            <!-- 事务管理器和事务作用域配置 -->
            <transactionManager type="JDBC"/>
            <!-- 数据源配置 -->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <!--数据库连接中要指定编码格式-->
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    <!-- 映射文件配置加载 -->
    <mappers>
        <!-- 映射文件xml加载 class类加载(注解方式开发) -->
        <mapper resource="mapper/UserDao.xml"/>
        <mapper resource="mapper/UserMapper.xml"/>
        <mapper resource="mapper/OrderMapper.xml"/>
        <mapper resource="generatormapper/OrderDetailMapper.xml"/>
        <mapper resource="generatormapper/OrderDetailMapperExt.xml"/>
        <mapper class="com.aaron.mapper.AnnotationUserMapper"/>
        <!--一下方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中.-->
        <!--<mapper url="绝对路径"/>-->
        <!--注册指定包下的所有mapper接口，来加载映射文件-->
        <!--<package name="com.aaron.mybatisdemo.mapper"/>-->
    </mappers>
</configuration>