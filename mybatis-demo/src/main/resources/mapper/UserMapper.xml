<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aaron.mybatisdemo.mapper.UserMapper">
    <!--开启二级缓存-->
    <cache/>
    <!--结果映射集 数据库列名和domain对象属性名映射,
    当数据库字段和实体类属性不一致时可以使用,或者使用数据库别名方式-->
    <resultMap id="userResult" type="user">
        <!--id 主键映射-->
        <id column="id" property="id"/>
        <!--普通对象属性映射-->
        <result column="username" property="username"/>
        <result column="birthday" property="birthday"/>
        <result column="address" property="address"/>
        <result column="sex" property="sex"/>
    </resultMap>
    <!--一对多结果集-->
    <resultMap id="userOrdersMap1" type="user">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="birthday" property="birthday"/>
        <result column="address" property="address"/>
        <result column="sex" property="sex"/>
        <collection property="orders" ofType="order">
            <id column="id" property="id"/>
            <result column="remark" property="remark"/>
            <result column="create_time" property="createTime"/>
            <result column="update_time" property="updateTime"/>
            <result column="user_id" property="userId"/>
        </collection>
    </resultMap>
    <!--一对多结果集 子查询订单信息
        查询一个列表,及其每个对象下面的对象属性时,会出现n+1问题
        1:一条sql查询一个列表
        n:多条sql查询每个列表对象中的对象属性
        会执行多条sql浪费数据库资源
        解决方案:
        1.MyBatis 能够对这样的查询进行延迟加载，因此可以将大量语句同时运行的开销分散开来。
        然而，如果你加载记录列表之后立刻就遍历列表以获取嵌套的数据，就会触发所有的延迟加载查询，性能可能会变得很糟糕
        2.关联的嵌套结果映射 可以使用级联的SQL语句一次性查询出结果集 见selectOrdersByUserId
        3.从版本 3.2.3 开始，MyBatis 提供了另一种解决 N+1 查询问题的方法。
          某些数据库允许存储过程返回多个结果集，或一次性执行多个语句，每个语句返回一个结果集。
          我们可以利用这个特性，在不使用连接的情况下，只访问数据库一次就能获得相关数据。
    -->
    <resultMap id="userOrdersMap2" type="user">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="birthday" property="birthday"/>
        <result column="address" property="address"/>
        <result column="sex" property="sex"/>
        <!-- 前提开启懒加载开关 fetchType是否使用延迟加载 eager 不使用 lazy 使用 默认为lazy -->
        <collection property="orders" javaType="ArrayList" column="id" ofType="order"  select="selectOrders" fetchType="eager">
            <id column="id" property="id"/>
            <result column="remark" property="remark"/>
            <result column="create_time" property="createTime"/>
            <result column="update_time" property="updateTime"/>
            <result column="user_id" property="userId"/>
        </collection>
    </resultMap>
    <!--SQL片段-->
    <sql id="userColumn">
        id,username,birthday,address,sex
    </sql>

    <!--findUserById findUserByName 中关于#和$的取值方式区别
        1.#{}相当于JDBC SQL语句中的占位符? (PreparedStatement)
          ${}:相当于JDBC SQL语句中的连接符合 + (Statement)
        2.#{}:进行输入映射的时候，会对参数进行类型解析（如果是String类型，那么SQL语句会自动加上’’）
          ${}:进行输入映射的时候，将参数原样输出到SQL语句中
        3.#{}:如果进行简单类型（String、Date、8种基本类型的包装类）的输入映射时，#{}中参数名称可以任意
          ${}:如果进行简单类型（String、Date、8种基本类型的包装类）的输入映射时，${}中参数名称必须是value\
        4.${}:存在SQL注入问题 ，使用OR 1=1 关键字将查询条件忽略
        使用场景:
        #{}取值比较常见,参数传递,where条件判断等
        ${}主要用于order by 的指定排序,表和列的特定输入条件
        例如:select * from ${user} where ${username} = #{name} order by ${create_time};
    -->
    <!--parameterType 输入映射 resultType 输出映射 resultMap 结果映射集-->
    <select id="findUserById" parameterType="int" resultMap="userResult">
        select
        <include refid="userColumn"/>
        from user where id = #{id};
    </select>

    <select id="findUserByName" parameterType="java.lang.String" resultType="user">
        select
        <include refid="userColumn"/>
        from user where username like '%${value}%'
    </select>

    <insert id="insertUser" parameterType="user" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
       <!-- &lt;!&ndash;主键返回 主键属性 主键生成是在插入前,插入后(mysql插入后生成) 返回结果类型&ndash;&gt;
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID() &lt;!&ndash;mysql的主键返回函数&ndash;&gt;
        </selectKey>-->
        insert into user(username,birthday,sex,address)
        values(#{username},#{birthday},#{sex},#{address})
    </insert>
    <delete id="deleteUserById" parameterType="int">
        delete from user where id = #{id}
    </delete>

    <!--刷新二级缓存
        通过flushCache属性，可以控制select、insert、update、delete标签是否属性二级缓存**
        默认设置
    ​    默认情况下如果是select语句，那么flushCache是false。
    ​    如果是insert、update、delete语句，那么flushCache是true。
    ​    如果查询语句设置成true，那么每次查询都是去数据库查询，即意味着该查询的二级缓存失效。
        如果增删改语句设置成false，即使用二级缓存，那么如果在数据库中修改了数据，而缓存数据还是原来的，这个时候就会出现脏读。
        useCache标识是否使用二级缓存-->
    <!--传入参数是对象类型-->
    <select id="queryUsersByCondition" parameterType="com.aaron.mybatisdemo.queryvo.UserQueryVO" resultType="user" useCache="false">
        select
        <include refid="userColumn"/>
        from user where address = #{userQueryVO.address} and sex = #{userQueryVO.sex}
    </select>
    <!--输出参数是基本类型-->
    <select id="selectUserCount" parameterType="com.aaron.mybatisdemo.queryvo.UserQueryVO" resultType="int">
        select count(*) from user where address = #{address} and sex = #{sex}
    </select>

    <select id="selectOrdersByUserId" parameterType="int" resultMap="userOrdersMap1">
        select u.*,o.*
        from user u
        left join `order` o on u.id = o.user_id
        where u.id = #{userId}
    </select>

    <select id="selectAllUserOrders" resultMap="userOrdersMap2">
        select * from user;
    </select>
    <select id="selectOrders" parameterType="int" resultType="order">
        select * from `order` where user_id = #{id}
    </select>
</mapper>